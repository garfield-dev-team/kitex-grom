// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package salary

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/garfield-dev-team/kitex_gorm/kitex_gen/common"
	"strings"
)

type Salary struct {
	Id             int64                 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt      string                `thrift:"created_at,2" frugal:"2,default,string" json:"created_at"`
	UpdatedAt      string                `thrift:"updated_at,3" frugal:"3,default,string" json:"updated_at"`
	EmployeeId     int64                 `thrift:"employee_id,4" frugal:"4,default,i64" json:"employee_id"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,5" frugal:"5,default,EnterpriseCode" json:"enterprise_code"`
	Month          string                `thrift:"month,6" frugal:"6,default,string" json:"month"`
	Salary         int32                 `thrift:"salary,7" frugal:"7,default,i32" json:"salary"`
}

func NewSalary() *Salary {
	return &Salary{}
}

func (p *Salary) InitDefault() {
	*p = Salary{}
}

func (p *Salary) GetId() (v int64) {
	return p.Id
}

func (p *Salary) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Salary) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Salary) GetEmployeeId() (v int64) {
	return p.EmployeeId
}

func (p *Salary) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *Salary) GetMonth() (v string) {
	return p.Month
}

func (p *Salary) GetSalary() (v int32) {
	return p.Salary
}
func (p *Salary) SetId(val int64) {
	p.Id = val
}
func (p *Salary) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Salary) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Salary) SetEmployeeId(val int64) {
	p.EmployeeId = val
}
func (p *Salary) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *Salary) SetMonth(val string) {
	p.Month = val
}
func (p *Salary) SetSalary(val int32) {
	p.Salary = val
}

var fieldIDToName_Salary = map[int16]string{
	1: "id",
	2: "created_at",
	3: "updated_at",
	4: "employee_id",
	5: "enterprise_code",
	6: "month",
	7: "salary",
}

func (p *Salary) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Salary[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Salary) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Salary) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Salary) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Salary) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EmployeeId = _field
	return nil
}
func (p *Salary) ReadField5(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *Salary) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Month = _field
	return nil
}
func (p *Salary) ReadField7(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Salary = _field
	return nil
}

func (p *Salary) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Salary"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Salary) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Salary) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Salary) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Salary) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EmployeeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Salary) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Salary) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Salary) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Salary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Salary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Salary(%+v)", *p)

}

func (p *Salary) DeepEqual(ano *Salary) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.EmployeeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field6DeepEqual(ano.Month) {
		return false
	}
	if !p.Field7DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *Salary) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Salary) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Salary) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Salary) Field4DeepEqual(src int64) bool {

	if p.EmployeeId != src {
		return false
	}
	return true
}
func (p *Salary) Field5DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *Salary) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *Salary) Field7DeepEqual(src int32) bool {

	if p.Salary != src {
		return false
	}
	return true
}

type CreateSalaryRequest struct {
	EmployeeId     int64                 `thrift:"employee_id,1" frugal:"1,default,i64" json:"employee_id"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,2" frugal:"2,default,EnterpriseCode" json:"enterprise_code"`
	Month          string                `thrift:"month,3" frugal:"3,default,string" json:"month"`
	Salary         int32                 `thrift:"salary,4" frugal:"4,default,i32" json:"salary"`
}

func NewCreateSalaryRequest() *CreateSalaryRequest {
	return &CreateSalaryRequest{}
}

func (p *CreateSalaryRequest) InitDefault() {
	*p = CreateSalaryRequest{}
}

func (p *CreateSalaryRequest) GetEmployeeId() (v int64) {
	return p.EmployeeId
}

func (p *CreateSalaryRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *CreateSalaryRequest) GetMonth() (v string) {
	return p.Month
}

func (p *CreateSalaryRequest) GetSalary() (v int32) {
	return p.Salary
}
func (p *CreateSalaryRequest) SetEmployeeId(val int64) {
	p.EmployeeId = val
}
func (p *CreateSalaryRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *CreateSalaryRequest) SetMonth(val string) {
	p.Month = val
}
func (p *CreateSalaryRequest) SetSalary(val int32) {
	p.Salary = val
}

var fieldIDToName_CreateSalaryRequest = map[int16]string{
	1: "employee_id",
	2: "enterprise_code",
	3: "month",
	4: "salary",
}

func (p *CreateSalaryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateSalaryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateSalaryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EmployeeId = _field
	return nil
}
func (p *CreateSalaryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *CreateSalaryRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Month = _field
	return nil
}
func (p *CreateSalaryRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Salary = _field
	return nil
}

func (p *CreateSalaryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSalaryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateSalaryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EmployeeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateSalaryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateSalaryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateSalaryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Salary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateSalaryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSalaryRequest(%+v)", *p)

}

func (p *CreateSalaryRequest) DeepEqual(ano *CreateSalaryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EmployeeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.Month) {
		return false
	}
	if !p.Field4DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *CreateSalaryRequest) Field1DeepEqual(src int64) bool {

	if p.EmployeeId != src {
		return false
	}
	return true
}
func (p *CreateSalaryRequest) Field2DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *CreateSalaryRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSalaryRequest) Field4DeepEqual(src int32) bool {

	if p.Salary != src {
		return false
	}
	return true
}

type CreateSalaryResponse struct {
	Salary *Salary `thrift:"salary,1" frugal:"1,default,Salary" json:"salary"`
}

func NewCreateSalaryResponse() *CreateSalaryResponse {
	return &CreateSalaryResponse{}
}

func (p *CreateSalaryResponse) InitDefault() {
	*p = CreateSalaryResponse{}
}

var CreateSalaryResponse_Salary_DEFAULT *Salary

func (p *CreateSalaryResponse) GetSalary() (v *Salary) {
	if !p.IsSetSalary() {
		return CreateSalaryResponse_Salary_DEFAULT
	}
	return p.Salary
}
func (p *CreateSalaryResponse) SetSalary(val *Salary) {
	p.Salary = val
}

var fieldIDToName_CreateSalaryResponse = map[int16]string{
	1: "salary",
}

func (p *CreateSalaryResponse) IsSetSalary() bool {
	return p.Salary != nil
}

func (p *CreateSalaryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateSalaryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateSalaryResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSalary()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Salary = _field
	return nil
}

func (p *CreateSalaryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSalaryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateSalaryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Salary.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateSalaryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSalaryResponse(%+v)", *p)

}

func (p *CreateSalaryResponse) DeepEqual(ano *CreateSalaryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *CreateSalaryResponse) Field1DeepEqual(src *Salary) bool {

	if !p.Salary.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateSalaryRequest struct {
	Id             int64                 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	EmployeeId     int64                 `thrift:"employee_id,2" frugal:"2,default,i64" json:"employee_id"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,3" frugal:"3,default,EnterpriseCode" json:"enterprise_code"`
	Month          string                `thrift:"month,4" frugal:"4,default,string" json:"month"`
	Salary         int32                 `thrift:"salary,5" frugal:"5,default,i32" json:"salary"`
}

func NewUpdateSalaryRequest() *UpdateSalaryRequest {
	return &UpdateSalaryRequest{}
}

func (p *UpdateSalaryRequest) InitDefault() {
	*p = UpdateSalaryRequest{}
}

func (p *UpdateSalaryRequest) GetId() (v int64) {
	return p.Id
}

func (p *UpdateSalaryRequest) GetEmployeeId() (v int64) {
	return p.EmployeeId
}

func (p *UpdateSalaryRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *UpdateSalaryRequest) GetMonth() (v string) {
	return p.Month
}

func (p *UpdateSalaryRequest) GetSalary() (v int32) {
	return p.Salary
}
func (p *UpdateSalaryRequest) SetId(val int64) {
	p.Id = val
}
func (p *UpdateSalaryRequest) SetEmployeeId(val int64) {
	p.EmployeeId = val
}
func (p *UpdateSalaryRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *UpdateSalaryRequest) SetMonth(val string) {
	p.Month = val
}
func (p *UpdateSalaryRequest) SetSalary(val int32) {
	p.Salary = val
}

var fieldIDToName_UpdateSalaryRequest = map[int16]string{
	1: "id",
	2: "employee_id",
	3: "enterprise_code",
	4: "month",
	5: "salary",
}

func (p *UpdateSalaryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateSalaryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateSalaryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateSalaryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EmployeeId = _field
	return nil
}
func (p *UpdateSalaryRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *UpdateSalaryRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Month = _field
	return nil
}
func (p *UpdateSalaryRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Salary = _field
	return nil
}

func (p *UpdateSalaryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSalaryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateSalaryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateSalaryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EmployeeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateSalaryRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateSalaryRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateSalaryRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Salary); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateSalaryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSalaryRequest(%+v)", *p)

}

func (p *UpdateSalaryRequest) DeepEqual(ano *UpdateSalaryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.EmployeeId) {
		return false
	}
	if !p.Field3DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field4DeepEqual(ano.Month) {
		return false
	}
	if !p.Field5DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *UpdateSalaryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateSalaryRequest) Field2DeepEqual(src int64) bool {

	if p.EmployeeId != src {
		return false
	}
	return true
}
func (p *UpdateSalaryRequest) Field3DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *UpdateSalaryRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSalaryRequest) Field5DeepEqual(src int32) bool {

	if p.Salary != src {
		return false
	}
	return true
}

type UpdateSalaryResponse struct {
	Salary *Salary `thrift:"salary,1" frugal:"1,default,Salary" json:"salary"`
}

func NewUpdateSalaryResponse() *UpdateSalaryResponse {
	return &UpdateSalaryResponse{}
}

func (p *UpdateSalaryResponse) InitDefault() {
	*p = UpdateSalaryResponse{}
}

var UpdateSalaryResponse_Salary_DEFAULT *Salary

func (p *UpdateSalaryResponse) GetSalary() (v *Salary) {
	if !p.IsSetSalary() {
		return UpdateSalaryResponse_Salary_DEFAULT
	}
	return p.Salary
}
func (p *UpdateSalaryResponse) SetSalary(val *Salary) {
	p.Salary = val
}

var fieldIDToName_UpdateSalaryResponse = map[int16]string{
	1: "salary",
}

func (p *UpdateSalaryResponse) IsSetSalary() bool {
	return p.Salary != nil
}

func (p *UpdateSalaryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateSalaryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateSalaryResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSalary()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Salary = _field
	return nil
}

func (p *UpdateSalaryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSalaryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateSalaryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Salary.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateSalaryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSalaryResponse(%+v)", *p)

}

func (p *UpdateSalaryResponse) DeepEqual(ano *UpdateSalaryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *UpdateSalaryResponse) Field1DeepEqual(src *Salary) bool {

	if !p.Salary.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteSalaryRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewDeleteSalaryRequest() *DeleteSalaryRequest {
	return &DeleteSalaryRequest{}
}

func (p *DeleteSalaryRequest) InitDefault() {
	*p = DeleteSalaryRequest{}
}

func (p *DeleteSalaryRequest) GetId() (v int64) {
	return p.Id
}
func (p *DeleteSalaryRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_DeleteSalaryRequest = map[int16]string{
	1: "id",
}

func (p *DeleteSalaryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteSalaryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteSalaryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *DeleteSalaryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSalaryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteSalaryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteSalaryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSalaryRequest(%+v)", *p)

}

func (p *DeleteSalaryRequest) DeepEqual(ano *DeleteSalaryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DeleteSalaryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type DeleteSalaryResponse struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewDeleteSalaryResponse() *DeleteSalaryResponse {
	return &DeleteSalaryResponse{}
}

func (p *DeleteSalaryResponse) InitDefault() {
	*p = DeleteSalaryResponse{}
}

func (p *DeleteSalaryResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeleteSalaryResponse) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_DeleteSalaryResponse = map[int16]string{
	1: "success",
}

func (p *DeleteSalaryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteSalaryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteSalaryResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}

func (p *DeleteSalaryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSalaryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteSalaryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteSalaryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSalaryResponse(%+v)", *p)

}

func (p *DeleteSalaryResponse) DeepEqual(ano *DeleteSalaryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeleteSalaryResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type GetSalaryRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewGetSalaryRequest() *GetSalaryRequest {
	return &GetSalaryRequest{}
}

func (p *GetSalaryRequest) InitDefault() {
	*p = GetSalaryRequest{}
}

func (p *GetSalaryRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetSalaryRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetSalaryRequest = map[int16]string{
	1: "id",
}

func (p *GetSalaryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSalaryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSalaryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetSalaryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSalaryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSalaryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSalaryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSalaryRequest(%+v)", *p)

}

func (p *GetSalaryRequest) DeepEqual(ano *GetSalaryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetSalaryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetSalaryResponse struct {
	Salary *Salary `thrift:"salary,1" frugal:"1,default,Salary" json:"salary"`
}

func NewGetSalaryResponse() *GetSalaryResponse {
	return &GetSalaryResponse{}
}

func (p *GetSalaryResponse) InitDefault() {
	*p = GetSalaryResponse{}
}

var GetSalaryResponse_Salary_DEFAULT *Salary

func (p *GetSalaryResponse) GetSalary() (v *Salary) {
	if !p.IsSetSalary() {
		return GetSalaryResponse_Salary_DEFAULT
	}
	return p.Salary
}
func (p *GetSalaryResponse) SetSalary(val *Salary) {
	p.Salary = val
}

var fieldIDToName_GetSalaryResponse = map[int16]string{
	1: "salary",
}

func (p *GetSalaryResponse) IsSetSalary() bool {
	return p.Salary != nil
}

func (p *GetSalaryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSalaryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetSalaryResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSalary()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Salary = _field
	return nil
}

func (p *GetSalaryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSalaryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSalaryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salary", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Salary.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSalaryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSalaryResponse(%+v)", *p)

}

func (p *GetSalaryResponse) DeepEqual(ano *GetSalaryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Salary) {
		return false
	}
	return true
}

func (p *GetSalaryResponse) Field1DeepEqual(src *Salary) bool {

	if !p.Salary.DeepEqual(src) {
		return false
	}
	return true
}

type ListSalariesRequest struct {
	EmployeeId     int64                 `thrift:"employee_id,1" frugal:"1,default,i64" json:"employee_id"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,2" frugal:"2,default,EnterpriseCode" json:"enterprise_code"`
	Month          string                `thrift:"month,3" frugal:"3,default,string" json:"month"`
	Page           int64                 `thrift:"page,4" frugal:"4,default,i64" json:"page"`
	PageSize       int64                 `thrift:"page_size,5" frugal:"5,default,i64" json:"page_size"`
}

func NewListSalariesRequest() *ListSalariesRequest {
	return &ListSalariesRequest{}
}

func (p *ListSalariesRequest) InitDefault() {
	*p = ListSalariesRequest{}
}

func (p *ListSalariesRequest) GetEmployeeId() (v int64) {
	return p.EmployeeId
}

func (p *ListSalariesRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *ListSalariesRequest) GetMonth() (v string) {
	return p.Month
}

func (p *ListSalariesRequest) GetPage() (v int64) {
	return p.Page
}

func (p *ListSalariesRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *ListSalariesRequest) SetEmployeeId(val int64) {
	p.EmployeeId = val
}
func (p *ListSalariesRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *ListSalariesRequest) SetMonth(val string) {
	p.Month = val
}
func (p *ListSalariesRequest) SetPage(val int64) {
	p.Page = val
}
func (p *ListSalariesRequest) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_ListSalariesRequest = map[int16]string{
	1: "employee_id",
	2: "enterprise_code",
	3: "month",
	4: "page",
	5: "page_size",
}

func (p *ListSalariesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSalariesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListSalariesRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EmployeeId = _field
	return nil
}
func (p *ListSalariesRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *ListSalariesRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Month = _field
	return nil
}
func (p *ListSalariesRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ListSalariesRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *ListSalariesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSalariesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSalariesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EmployeeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSalariesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListSalariesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("month", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Month); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListSalariesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListSalariesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListSalariesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSalariesRequest(%+v)", *p)

}

func (p *ListSalariesRequest) DeepEqual(ano *ListSalariesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EmployeeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.Month) {
		return false
	}
	if !p.Field4DeepEqual(ano.Page) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ListSalariesRequest) Field1DeepEqual(src int64) bool {

	if p.EmployeeId != src {
		return false
	}
	return true
}
func (p *ListSalariesRequest) Field2DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *ListSalariesRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Month, src) != 0 {
		return false
	}
	return true
}
func (p *ListSalariesRequest) Field4DeepEqual(src int64) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *ListSalariesRequest) Field5DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type ListSalariesResponse struct {
	Salaries []*Salary `thrift:"salaries,1" frugal:"1,default,list<Salary>" json:"salaries"`
	Total    int64     `thrift:"total,2" frugal:"2,default,i64" json:"total"`
}

func NewListSalariesResponse() *ListSalariesResponse {
	return &ListSalariesResponse{}
}

func (p *ListSalariesResponse) InitDefault() {
	*p = ListSalariesResponse{}
}

func (p *ListSalariesResponse) GetSalaries() (v []*Salary) {
	return p.Salaries
}

func (p *ListSalariesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *ListSalariesResponse) SetSalaries(val []*Salary) {
	p.Salaries = val
}
func (p *ListSalariesResponse) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_ListSalariesResponse = map[int16]string{
	1: "salaries",
	2: "total",
}

func (p *ListSalariesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSalariesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListSalariesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Salary, 0, size)
	values := make([]Salary, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Salaries = _field
	return nil
}
func (p *ListSalariesResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *ListSalariesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSalariesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSalariesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("salaries", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Salaries)); err != nil {
		return err
	}
	for _, v := range p.Salaries {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSalariesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListSalariesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSalariesResponse(%+v)", *p)

}

func (p *ListSalariesResponse) DeepEqual(ano *ListSalariesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Salaries) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListSalariesResponse) Field1DeepEqual(src []*Salary) bool {

	if len(p.Salaries) != len(src) {
		return false
	}
	for i, v := range p.Salaries {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSalariesResponse) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type SalaryService interface {
	CreateSalary(ctx context.Context, req *CreateSalaryRequest) (r *CreateSalaryResponse, err error)

	UpdateSalary(ctx context.Context, req *UpdateSalaryRequest) (r *UpdateSalaryResponse, err error)

	DeleteSalary(ctx context.Context, req *DeleteSalaryRequest) (r *DeleteSalaryResponse, err error)

	GetSalary(ctx context.Context, req *GetSalaryRequest) (r *GetSalaryResponse, err error)

	ListSalaries(ctx context.Context, req *ListSalariesRequest) (r *ListSalariesResponse, err error)
}

type SalaryServiceClient struct {
	c thrift.TClient
}

func NewSalaryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SalaryServiceClient {
	return &SalaryServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSalaryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SalaryServiceClient {
	return &SalaryServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSalaryServiceClient(c thrift.TClient) *SalaryServiceClient {
	return &SalaryServiceClient{
		c: c,
	}
}

func (p *SalaryServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SalaryServiceClient) CreateSalary(ctx context.Context, req *CreateSalaryRequest) (r *CreateSalaryResponse, err error) {
	var _args SalaryServiceCreateSalaryArgs
	_args.Req = req
	var _result SalaryServiceCreateSalaryResult
	if err = p.Client_().Call(ctx, "CreateSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SalaryServiceClient) UpdateSalary(ctx context.Context, req *UpdateSalaryRequest) (r *UpdateSalaryResponse, err error) {
	var _args SalaryServiceUpdateSalaryArgs
	_args.Req = req
	var _result SalaryServiceUpdateSalaryResult
	if err = p.Client_().Call(ctx, "UpdateSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SalaryServiceClient) DeleteSalary(ctx context.Context, req *DeleteSalaryRequest) (r *DeleteSalaryResponse, err error) {
	var _args SalaryServiceDeleteSalaryArgs
	_args.Req = req
	var _result SalaryServiceDeleteSalaryResult
	if err = p.Client_().Call(ctx, "DeleteSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SalaryServiceClient) GetSalary(ctx context.Context, req *GetSalaryRequest) (r *GetSalaryResponse, err error) {
	var _args SalaryServiceGetSalaryArgs
	_args.Req = req
	var _result SalaryServiceGetSalaryResult
	if err = p.Client_().Call(ctx, "GetSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *SalaryServiceClient) ListSalaries(ctx context.Context, req *ListSalariesRequest) (r *ListSalariesResponse, err error) {
	var _args SalaryServiceListSalariesArgs
	_args.Req = req
	var _result SalaryServiceListSalariesResult
	if err = p.Client_().Call(ctx, "ListSalaries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type SalaryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SalaryService
}

func (p *SalaryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SalaryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SalaryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSalaryServiceProcessor(handler SalaryService) *SalaryServiceProcessor {
	self := &SalaryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateSalary", &salaryServiceProcessorCreateSalary{handler: handler})
	self.AddToProcessorMap("UpdateSalary", &salaryServiceProcessorUpdateSalary{handler: handler})
	self.AddToProcessorMap("DeleteSalary", &salaryServiceProcessorDeleteSalary{handler: handler})
	self.AddToProcessorMap("GetSalary", &salaryServiceProcessorGetSalary{handler: handler})
	self.AddToProcessorMap("ListSalaries", &salaryServiceProcessorListSalaries{handler: handler})
	return self
}
func (p *SalaryServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type salaryServiceProcessorCreateSalary struct {
	handler SalaryService
}

func (p *salaryServiceProcessorCreateSalary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SalaryServiceCreateSalaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SalaryServiceCreateSalaryResult{}
	var retval *CreateSalaryResponse
	if retval, err2 = p.handler.CreateSalary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSalary: "+err2.Error())
		oprot.WriteMessageBegin("CreateSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSalary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type salaryServiceProcessorUpdateSalary struct {
	handler SalaryService
}

func (p *salaryServiceProcessorUpdateSalary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SalaryServiceUpdateSalaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SalaryServiceUpdateSalaryResult{}
	var retval *UpdateSalaryResponse
	if retval, err2 = p.handler.UpdateSalary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSalary: "+err2.Error())
		oprot.WriteMessageBegin("UpdateSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSalary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type salaryServiceProcessorDeleteSalary struct {
	handler SalaryService
}

func (p *salaryServiceProcessorDeleteSalary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SalaryServiceDeleteSalaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SalaryServiceDeleteSalaryResult{}
	var retval *DeleteSalaryResponse
	if retval, err2 = p.handler.DeleteSalary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteSalary: "+err2.Error())
		oprot.WriteMessageBegin("DeleteSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteSalary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type salaryServiceProcessorGetSalary struct {
	handler SalaryService
}

func (p *salaryServiceProcessorGetSalary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SalaryServiceGetSalaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SalaryServiceGetSalaryResult{}
	var retval *GetSalaryResponse
	if retval, err2 = p.handler.GetSalary(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSalary: "+err2.Error())
		oprot.WriteMessageBegin("GetSalary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSalary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type salaryServiceProcessorListSalaries struct {
	handler SalaryService
}

func (p *salaryServiceProcessorListSalaries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SalaryServiceListSalariesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSalaries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SalaryServiceListSalariesResult{}
	var retval *ListSalariesResponse
	if retval, err2 = p.handler.ListSalaries(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSalaries: "+err2.Error())
		oprot.WriteMessageBegin("ListSalaries", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSalaries", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SalaryServiceCreateSalaryArgs struct {
	Req *CreateSalaryRequest `thrift:"req,1" frugal:"1,default,CreateSalaryRequest" json:"req"`
}

func NewSalaryServiceCreateSalaryArgs() *SalaryServiceCreateSalaryArgs {
	return &SalaryServiceCreateSalaryArgs{}
}

func (p *SalaryServiceCreateSalaryArgs) InitDefault() {
	*p = SalaryServiceCreateSalaryArgs{}
}

var SalaryServiceCreateSalaryArgs_Req_DEFAULT *CreateSalaryRequest

func (p *SalaryServiceCreateSalaryArgs) GetReq() (v *CreateSalaryRequest) {
	if !p.IsSetReq() {
		return SalaryServiceCreateSalaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SalaryServiceCreateSalaryArgs) SetReq(val *CreateSalaryRequest) {
	p.Req = val
}

var fieldIDToName_SalaryServiceCreateSalaryArgs = map[int16]string{
	1: "req",
}

func (p *SalaryServiceCreateSalaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SalaryServiceCreateSalaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceCreateSalaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateSalaryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SalaryServiceCreateSalaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSalary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceCreateSalaryArgs(%+v)", *p)

}

func (p *SalaryServiceCreateSalaryArgs) DeepEqual(ano *SalaryServiceCreateSalaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SalaryServiceCreateSalaryArgs) Field1DeepEqual(src *CreateSalaryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceCreateSalaryResult struct {
	Success *CreateSalaryResponse `thrift:"success,0,optional" frugal:"0,optional,CreateSalaryResponse" json:"success,omitempty"`
}

func NewSalaryServiceCreateSalaryResult() *SalaryServiceCreateSalaryResult {
	return &SalaryServiceCreateSalaryResult{}
}

func (p *SalaryServiceCreateSalaryResult) InitDefault() {
	*p = SalaryServiceCreateSalaryResult{}
}

var SalaryServiceCreateSalaryResult_Success_DEFAULT *CreateSalaryResponse

func (p *SalaryServiceCreateSalaryResult) GetSuccess() (v *CreateSalaryResponse) {
	if !p.IsSetSuccess() {
		return SalaryServiceCreateSalaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SalaryServiceCreateSalaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSalaryResponse)
}

var fieldIDToName_SalaryServiceCreateSalaryResult = map[int16]string{
	0: "success",
}

func (p *SalaryServiceCreateSalaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SalaryServiceCreateSalaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceCreateSalaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateSalaryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SalaryServiceCreateSalaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSalary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SalaryServiceCreateSalaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceCreateSalaryResult(%+v)", *p)

}

func (p *SalaryServiceCreateSalaryResult) DeepEqual(ano *SalaryServiceCreateSalaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SalaryServiceCreateSalaryResult) Field0DeepEqual(src *CreateSalaryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceUpdateSalaryArgs struct {
	Req *UpdateSalaryRequest `thrift:"req,1" frugal:"1,default,UpdateSalaryRequest" json:"req"`
}

func NewSalaryServiceUpdateSalaryArgs() *SalaryServiceUpdateSalaryArgs {
	return &SalaryServiceUpdateSalaryArgs{}
}

func (p *SalaryServiceUpdateSalaryArgs) InitDefault() {
	*p = SalaryServiceUpdateSalaryArgs{}
}

var SalaryServiceUpdateSalaryArgs_Req_DEFAULT *UpdateSalaryRequest

func (p *SalaryServiceUpdateSalaryArgs) GetReq() (v *UpdateSalaryRequest) {
	if !p.IsSetReq() {
		return SalaryServiceUpdateSalaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SalaryServiceUpdateSalaryArgs) SetReq(val *UpdateSalaryRequest) {
	p.Req = val
}

var fieldIDToName_SalaryServiceUpdateSalaryArgs = map[int16]string{
	1: "req",
}

func (p *SalaryServiceUpdateSalaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SalaryServiceUpdateSalaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceUpdateSalaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateSalaryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SalaryServiceUpdateSalaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSalary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceUpdateSalaryArgs(%+v)", *p)

}

func (p *SalaryServiceUpdateSalaryArgs) DeepEqual(ano *SalaryServiceUpdateSalaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SalaryServiceUpdateSalaryArgs) Field1DeepEqual(src *UpdateSalaryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceUpdateSalaryResult struct {
	Success *UpdateSalaryResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateSalaryResponse" json:"success,omitempty"`
}

func NewSalaryServiceUpdateSalaryResult() *SalaryServiceUpdateSalaryResult {
	return &SalaryServiceUpdateSalaryResult{}
}

func (p *SalaryServiceUpdateSalaryResult) InitDefault() {
	*p = SalaryServiceUpdateSalaryResult{}
}

var SalaryServiceUpdateSalaryResult_Success_DEFAULT *UpdateSalaryResponse

func (p *SalaryServiceUpdateSalaryResult) GetSuccess() (v *UpdateSalaryResponse) {
	if !p.IsSetSuccess() {
		return SalaryServiceUpdateSalaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SalaryServiceUpdateSalaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateSalaryResponse)
}

var fieldIDToName_SalaryServiceUpdateSalaryResult = map[int16]string{
	0: "success",
}

func (p *SalaryServiceUpdateSalaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SalaryServiceUpdateSalaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceUpdateSalaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateSalaryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SalaryServiceUpdateSalaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSalary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SalaryServiceUpdateSalaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceUpdateSalaryResult(%+v)", *p)

}

func (p *SalaryServiceUpdateSalaryResult) DeepEqual(ano *SalaryServiceUpdateSalaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SalaryServiceUpdateSalaryResult) Field0DeepEqual(src *UpdateSalaryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceDeleteSalaryArgs struct {
	Req *DeleteSalaryRequest `thrift:"req,1" frugal:"1,default,DeleteSalaryRequest" json:"req"`
}

func NewSalaryServiceDeleteSalaryArgs() *SalaryServiceDeleteSalaryArgs {
	return &SalaryServiceDeleteSalaryArgs{}
}

func (p *SalaryServiceDeleteSalaryArgs) InitDefault() {
	*p = SalaryServiceDeleteSalaryArgs{}
}

var SalaryServiceDeleteSalaryArgs_Req_DEFAULT *DeleteSalaryRequest

func (p *SalaryServiceDeleteSalaryArgs) GetReq() (v *DeleteSalaryRequest) {
	if !p.IsSetReq() {
		return SalaryServiceDeleteSalaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SalaryServiceDeleteSalaryArgs) SetReq(val *DeleteSalaryRequest) {
	p.Req = val
}

var fieldIDToName_SalaryServiceDeleteSalaryArgs = map[int16]string{
	1: "req",
}

func (p *SalaryServiceDeleteSalaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SalaryServiceDeleteSalaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceDeleteSalaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteSalaryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SalaryServiceDeleteSalaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSalary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceDeleteSalaryArgs(%+v)", *p)

}

func (p *SalaryServiceDeleteSalaryArgs) DeepEqual(ano *SalaryServiceDeleteSalaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SalaryServiceDeleteSalaryArgs) Field1DeepEqual(src *DeleteSalaryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceDeleteSalaryResult struct {
	Success *DeleteSalaryResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteSalaryResponse" json:"success,omitempty"`
}

func NewSalaryServiceDeleteSalaryResult() *SalaryServiceDeleteSalaryResult {
	return &SalaryServiceDeleteSalaryResult{}
}

func (p *SalaryServiceDeleteSalaryResult) InitDefault() {
	*p = SalaryServiceDeleteSalaryResult{}
}

var SalaryServiceDeleteSalaryResult_Success_DEFAULT *DeleteSalaryResponse

func (p *SalaryServiceDeleteSalaryResult) GetSuccess() (v *DeleteSalaryResponse) {
	if !p.IsSetSuccess() {
		return SalaryServiceDeleteSalaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SalaryServiceDeleteSalaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSalaryResponse)
}

var fieldIDToName_SalaryServiceDeleteSalaryResult = map[int16]string{
	0: "success",
}

func (p *SalaryServiceDeleteSalaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SalaryServiceDeleteSalaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceDeleteSalaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteSalaryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SalaryServiceDeleteSalaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSalary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SalaryServiceDeleteSalaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceDeleteSalaryResult(%+v)", *p)

}

func (p *SalaryServiceDeleteSalaryResult) DeepEqual(ano *SalaryServiceDeleteSalaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SalaryServiceDeleteSalaryResult) Field0DeepEqual(src *DeleteSalaryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceGetSalaryArgs struct {
	Req *GetSalaryRequest `thrift:"req,1" frugal:"1,default,GetSalaryRequest" json:"req"`
}

func NewSalaryServiceGetSalaryArgs() *SalaryServiceGetSalaryArgs {
	return &SalaryServiceGetSalaryArgs{}
}

func (p *SalaryServiceGetSalaryArgs) InitDefault() {
	*p = SalaryServiceGetSalaryArgs{}
}

var SalaryServiceGetSalaryArgs_Req_DEFAULT *GetSalaryRequest

func (p *SalaryServiceGetSalaryArgs) GetReq() (v *GetSalaryRequest) {
	if !p.IsSetReq() {
		return SalaryServiceGetSalaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SalaryServiceGetSalaryArgs) SetReq(val *GetSalaryRequest) {
	p.Req = val
}

var fieldIDToName_SalaryServiceGetSalaryArgs = map[int16]string{
	1: "req",
}

func (p *SalaryServiceGetSalaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SalaryServiceGetSalaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceGetSalaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceGetSalaryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetSalaryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SalaryServiceGetSalaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSalary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceGetSalaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SalaryServiceGetSalaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceGetSalaryArgs(%+v)", *p)

}

func (p *SalaryServiceGetSalaryArgs) DeepEqual(ano *SalaryServiceGetSalaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SalaryServiceGetSalaryArgs) Field1DeepEqual(src *GetSalaryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceGetSalaryResult struct {
	Success *GetSalaryResponse `thrift:"success,0,optional" frugal:"0,optional,GetSalaryResponse" json:"success,omitempty"`
}

func NewSalaryServiceGetSalaryResult() *SalaryServiceGetSalaryResult {
	return &SalaryServiceGetSalaryResult{}
}

func (p *SalaryServiceGetSalaryResult) InitDefault() {
	*p = SalaryServiceGetSalaryResult{}
}

var SalaryServiceGetSalaryResult_Success_DEFAULT *GetSalaryResponse

func (p *SalaryServiceGetSalaryResult) GetSuccess() (v *GetSalaryResponse) {
	if !p.IsSetSuccess() {
		return SalaryServiceGetSalaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SalaryServiceGetSalaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSalaryResponse)
}

var fieldIDToName_SalaryServiceGetSalaryResult = map[int16]string{
	0: "success",
}

func (p *SalaryServiceGetSalaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SalaryServiceGetSalaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceGetSalaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceGetSalaryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetSalaryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SalaryServiceGetSalaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSalary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceGetSalaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SalaryServiceGetSalaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceGetSalaryResult(%+v)", *p)

}

func (p *SalaryServiceGetSalaryResult) DeepEqual(ano *SalaryServiceGetSalaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SalaryServiceGetSalaryResult) Field0DeepEqual(src *GetSalaryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceListSalariesArgs struct {
	Req *ListSalariesRequest `thrift:"req,1" frugal:"1,default,ListSalariesRequest" json:"req"`
}

func NewSalaryServiceListSalariesArgs() *SalaryServiceListSalariesArgs {
	return &SalaryServiceListSalariesArgs{}
}

func (p *SalaryServiceListSalariesArgs) InitDefault() {
	*p = SalaryServiceListSalariesArgs{}
}

var SalaryServiceListSalariesArgs_Req_DEFAULT *ListSalariesRequest

func (p *SalaryServiceListSalariesArgs) GetReq() (v *ListSalariesRequest) {
	if !p.IsSetReq() {
		return SalaryServiceListSalariesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SalaryServiceListSalariesArgs) SetReq(val *ListSalariesRequest) {
	p.Req = val
}

var fieldIDToName_SalaryServiceListSalariesArgs = map[int16]string{
	1: "req",
}

func (p *SalaryServiceListSalariesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SalaryServiceListSalariesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceListSalariesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceListSalariesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListSalariesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *SalaryServiceListSalariesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSalaries_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceListSalariesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SalaryServiceListSalariesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceListSalariesArgs(%+v)", *p)

}

func (p *SalaryServiceListSalariesArgs) DeepEqual(ano *SalaryServiceListSalariesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SalaryServiceListSalariesArgs) Field1DeepEqual(src *ListSalariesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SalaryServiceListSalariesResult struct {
	Success *ListSalariesResponse `thrift:"success,0,optional" frugal:"0,optional,ListSalariesResponse" json:"success,omitempty"`
}

func NewSalaryServiceListSalariesResult() *SalaryServiceListSalariesResult {
	return &SalaryServiceListSalariesResult{}
}

func (p *SalaryServiceListSalariesResult) InitDefault() {
	*p = SalaryServiceListSalariesResult{}
}

var SalaryServiceListSalariesResult_Success_DEFAULT *ListSalariesResponse

func (p *SalaryServiceListSalariesResult) GetSuccess() (v *ListSalariesResponse) {
	if !p.IsSetSuccess() {
		return SalaryServiceListSalariesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SalaryServiceListSalariesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSalariesResponse)
}

var fieldIDToName_SalaryServiceListSalariesResult = map[int16]string{
	0: "success",
}

func (p *SalaryServiceListSalariesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SalaryServiceListSalariesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SalaryServiceListSalariesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SalaryServiceListSalariesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListSalariesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *SalaryServiceListSalariesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSalaries_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SalaryServiceListSalariesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SalaryServiceListSalariesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SalaryServiceListSalariesResult(%+v)", *p)

}

func (p *SalaryServiceListSalariesResult) DeepEqual(ano *SalaryServiceListSalariesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *SalaryServiceListSalariesResult) Field0DeepEqual(src *ListSalariesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
