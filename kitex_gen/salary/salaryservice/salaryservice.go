// Code generated by Kitex v0.9.1. DO NOT EDIT.

package salaryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	salary "github.com/garfield-dev-team/kitex_gorm/kitex_gen/salary"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateSalary": kitex.NewMethodInfo(
		createSalaryHandler,
		newSalaryServiceCreateSalaryArgs,
		newSalaryServiceCreateSalaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateSalary": kitex.NewMethodInfo(
		updateSalaryHandler,
		newSalaryServiceUpdateSalaryArgs,
		newSalaryServiceUpdateSalaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteSalary": kitex.NewMethodInfo(
		deleteSalaryHandler,
		newSalaryServiceDeleteSalaryArgs,
		newSalaryServiceDeleteSalaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSalary": kitex.NewMethodInfo(
		getSalaryHandler,
		newSalaryServiceGetSalaryArgs,
		newSalaryServiceGetSalaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSalaries": kitex.NewMethodInfo(
		listSalariesHandler,
		newSalaryServiceListSalariesArgs,
		newSalaryServiceListSalariesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	salaryServiceServiceInfo                = NewServiceInfo()
	salaryServiceServiceInfoForClient       = NewServiceInfoForClient()
	salaryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return salaryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return salaryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return salaryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SalaryService"
	handlerType := (*salary.SalaryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "salary",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createSalaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*salary.SalaryServiceCreateSalaryArgs)
	realResult := result.(*salary.SalaryServiceCreateSalaryResult)
	success, err := handler.(salary.SalaryService).CreateSalary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSalaryServiceCreateSalaryArgs() interface{} {
	return salary.NewSalaryServiceCreateSalaryArgs()
}

func newSalaryServiceCreateSalaryResult() interface{} {
	return salary.NewSalaryServiceCreateSalaryResult()
}

func updateSalaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*salary.SalaryServiceUpdateSalaryArgs)
	realResult := result.(*salary.SalaryServiceUpdateSalaryResult)
	success, err := handler.(salary.SalaryService).UpdateSalary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSalaryServiceUpdateSalaryArgs() interface{} {
	return salary.NewSalaryServiceUpdateSalaryArgs()
}

func newSalaryServiceUpdateSalaryResult() interface{} {
	return salary.NewSalaryServiceUpdateSalaryResult()
}

func deleteSalaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*salary.SalaryServiceDeleteSalaryArgs)
	realResult := result.(*salary.SalaryServiceDeleteSalaryResult)
	success, err := handler.(salary.SalaryService).DeleteSalary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSalaryServiceDeleteSalaryArgs() interface{} {
	return salary.NewSalaryServiceDeleteSalaryArgs()
}

func newSalaryServiceDeleteSalaryResult() interface{} {
	return salary.NewSalaryServiceDeleteSalaryResult()
}

func getSalaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*salary.SalaryServiceGetSalaryArgs)
	realResult := result.(*salary.SalaryServiceGetSalaryResult)
	success, err := handler.(salary.SalaryService).GetSalary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSalaryServiceGetSalaryArgs() interface{} {
	return salary.NewSalaryServiceGetSalaryArgs()
}

func newSalaryServiceGetSalaryResult() interface{} {
	return salary.NewSalaryServiceGetSalaryResult()
}

func listSalariesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*salary.SalaryServiceListSalariesArgs)
	realResult := result.(*salary.SalaryServiceListSalariesResult)
	success, err := handler.(salary.SalaryService).ListSalaries(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSalaryServiceListSalariesArgs() interface{} {
	return salary.NewSalaryServiceListSalariesArgs()
}

func newSalaryServiceListSalariesResult() interface{} {
	return salary.NewSalaryServiceListSalariesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateSalary(ctx context.Context, req *salary.CreateSalaryRequest) (r *salary.CreateSalaryResponse, err error) {
	var _args salary.SalaryServiceCreateSalaryArgs
	_args.Req = req
	var _result salary.SalaryServiceCreateSalaryResult
	if err = p.c.Call(ctx, "CreateSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSalary(ctx context.Context, req *salary.UpdateSalaryRequest) (r *salary.UpdateSalaryResponse, err error) {
	var _args salary.SalaryServiceUpdateSalaryArgs
	_args.Req = req
	var _result salary.SalaryServiceUpdateSalaryResult
	if err = p.c.Call(ctx, "UpdateSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSalary(ctx context.Context, req *salary.DeleteSalaryRequest) (r *salary.DeleteSalaryResponse, err error) {
	var _args salary.SalaryServiceDeleteSalaryArgs
	_args.Req = req
	var _result salary.SalaryServiceDeleteSalaryResult
	if err = p.c.Call(ctx, "DeleteSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSalary(ctx context.Context, req *salary.GetSalaryRequest) (r *salary.GetSalaryResponse, err error) {
	var _args salary.SalaryServiceGetSalaryArgs
	_args.Req = req
	var _result salary.SalaryServiceGetSalaryResult
	if err = p.c.Call(ctx, "GetSalary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSalaries(ctx context.Context, req *salary.ListSalariesRequest) (r *salary.ListSalariesResponse, err error) {
	var _args salary.SalaryServiceListSalariesArgs
	_args.Req = req
	var _result salary.SalaryServiceListSalariesResult
	if err = p.c.Call(ctx, "ListSalaries", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
