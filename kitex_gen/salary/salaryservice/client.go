// Code generated by Kitex v0.9.1. DO NOT EDIT.

package salaryservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	salary "github.com/garfield-dev-team/kitex_gorm/kitex_gen/salary"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateSalary(ctx context.Context, req *salary.CreateSalaryRequest, callOptions ...callopt.Option) (r *salary.CreateSalaryResponse, err error)
	UpdateSalary(ctx context.Context, req *salary.UpdateSalaryRequest, callOptions ...callopt.Option) (r *salary.UpdateSalaryResponse, err error)
	DeleteSalary(ctx context.Context, req *salary.DeleteSalaryRequest, callOptions ...callopt.Option) (r *salary.DeleteSalaryResponse, err error)
	GetSalary(ctx context.Context, req *salary.GetSalaryRequest, callOptions ...callopt.Option) (r *salary.GetSalaryResponse, err error)
	ListSalaries(ctx context.Context, req *salary.ListSalariesRequest, callOptions ...callopt.Option) (r *salary.ListSalariesResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kSalaryServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSalaryServiceClient struct {
	*kClient
}

func (p *kSalaryServiceClient) CreateSalary(ctx context.Context, req *salary.CreateSalaryRequest, callOptions ...callopt.Option) (r *salary.CreateSalaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSalary(ctx, req)
}

func (p *kSalaryServiceClient) UpdateSalary(ctx context.Context, req *salary.UpdateSalaryRequest, callOptions ...callopt.Option) (r *salary.UpdateSalaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSalary(ctx, req)
}

func (p *kSalaryServiceClient) DeleteSalary(ctx context.Context, req *salary.DeleteSalaryRequest, callOptions ...callopt.Option) (r *salary.DeleteSalaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteSalary(ctx, req)
}

func (p *kSalaryServiceClient) GetSalary(ctx context.Context, req *salary.GetSalaryRequest, callOptions ...callopt.Option) (r *salary.GetSalaryResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSalary(ctx, req)
}

func (p *kSalaryServiceClient) ListSalaries(ctx context.Context, req *salary.ListSalariesRequest, callOptions ...callopt.Option) (r *salary.ListSalariesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSalaries(ctx, req)
}
