// Code generated by Kitex v0.9.1. DO NOT EDIT.

package employeeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	employee "github.com/garfield-dev-team/kitex_gorm/kitex_gen/employee"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateEmployee(ctx context.Context, req *employee.CreateEmployeeRequest, callOptions ...callopt.Option) (r *employee.CreateEmployeeResponse, err error)
	UpdateEmployee(ctx context.Context, req *employee.UpdateEmployeeRequest, callOptions ...callopt.Option) (r *employee.UpdateEmployeeResponse, err error)
	DeleteEmployee(ctx context.Context, req *employee.DeleteEmployeeRequest, callOptions ...callopt.Option) (r *employee.DeleteEmployeeResponse, err error)
	GetEmployee(ctx context.Context, req *employee.GetEmployeeRequest, callOptions ...callopt.Option) (r *employee.GetEmployeeResponse, err error)
	ListEmployees(ctx context.Context, req *employee.ListEmployeesRequest, callOptions ...callopt.Option) (r *employee.ListEmployeesResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kEmployeeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kEmployeeServiceClient struct {
	*kClient
}

func (p *kEmployeeServiceClient) CreateEmployee(ctx context.Context, req *employee.CreateEmployeeRequest, callOptions ...callopt.Option) (r *employee.CreateEmployeeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateEmployee(ctx, req)
}

func (p *kEmployeeServiceClient) UpdateEmployee(ctx context.Context, req *employee.UpdateEmployeeRequest, callOptions ...callopt.Option) (r *employee.UpdateEmployeeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateEmployee(ctx, req)
}

func (p *kEmployeeServiceClient) DeleteEmployee(ctx context.Context, req *employee.DeleteEmployeeRequest, callOptions ...callopt.Option) (r *employee.DeleteEmployeeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteEmployee(ctx, req)
}

func (p *kEmployeeServiceClient) GetEmployee(ctx context.Context, req *employee.GetEmployeeRequest, callOptions ...callopt.Option) (r *employee.GetEmployeeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetEmployee(ctx, req)
}

func (p *kEmployeeServiceClient) ListEmployees(ctx context.Context, req *employee.ListEmployeesRequest, callOptions ...callopt.Option) (r *employee.ListEmployeesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListEmployees(ctx, req)
}
