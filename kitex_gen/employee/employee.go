// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package employee

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/garfield-dev-team/kitex_gorm/kitex_gen/common"
	"strings"
)

type Employee struct {
	Id             int64                 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	CreatedAt      string                `thrift:"created_at,2" frugal:"2,default,string" json:"created_at"`
	UpdatedAt      string                `thrift:"updated_at,3" frugal:"3,default,string" json:"updated_at"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,4" frugal:"4,default,EnterpriseCode" json:"enterprise_code"`
	Name           string                `thrift:"name,5" frugal:"5,default,string" json:"name"`
	Gender         common.Gender         `thrift:"gender,6" frugal:"6,default,Gender" json:"gender"`
	Age            int64                 `thrift:"age,7" frugal:"7,default,i64" json:"age"`
	Avatar         string                `thrift:"avatar,8" frugal:"8,default,string" json:"avatar"`
	Mobile         string                `thrift:"mobile,9" frugal:"9,default,string" json:"mobile"`
	Introduce      string                `thrift:"introduce,10" frugal:"10,default,string" json:"introduce"`
	IdCardNum      string                `thrift:"id_card_num,11" frugal:"11,default,string" json:"id_card_num"`
	BankCardNum    string                `thrift:"bank_card_num,12" frugal:"12,default,string" json:"bank_card_num"`
}

func NewEmployee() *Employee {
	return &Employee{}
}

func (p *Employee) InitDefault() {
	*p = Employee{}
}

func (p *Employee) GetId() (v int64) {
	return p.Id
}

func (p *Employee) GetCreatedAt() (v string) {
	return p.CreatedAt
}

func (p *Employee) GetUpdatedAt() (v string) {
	return p.UpdatedAt
}

func (p *Employee) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *Employee) GetName() (v string) {
	return p.Name
}

func (p *Employee) GetGender() (v common.Gender) {
	return p.Gender
}

func (p *Employee) GetAge() (v int64) {
	return p.Age
}

func (p *Employee) GetAvatar() (v string) {
	return p.Avatar
}

func (p *Employee) GetMobile() (v string) {
	return p.Mobile
}

func (p *Employee) GetIntroduce() (v string) {
	return p.Introduce
}

func (p *Employee) GetIdCardNum() (v string) {
	return p.IdCardNum
}

func (p *Employee) GetBankCardNum() (v string) {
	return p.BankCardNum
}
func (p *Employee) SetId(val int64) {
	p.Id = val
}
func (p *Employee) SetCreatedAt(val string) {
	p.CreatedAt = val
}
func (p *Employee) SetUpdatedAt(val string) {
	p.UpdatedAt = val
}
func (p *Employee) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *Employee) SetName(val string) {
	p.Name = val
}
func (p *Employee) SetGender(val common.Gender) {
	p.Gender = val
}
func (p *Employee) SetAge(val int64) {
	p.Age = val
}
func (p *Employee) SetAvatar(val string) {
	p.Avatar = val
}
func (p *Employee) SetMobile(val string) {
	p.Mobile = val
}
func (p *Employee) SetIntroduce(val string) {
	p.Introduce = val
}
func (p *Employee) SetIdCardNum(val string) {
	p.IdCardNum = val
}
func (p *Employee) SetBankCardNum(val string) {
	p.BankCardNum = val
}

var fieldIDToName_Employee = map[int16]string{
	1:  "id",
	2:  "created_at",
	3:  "updated_at",
	4:  "enterprise_code",
	5:  "name",
	6:  "gender",
	7:  "age",
	8:  "avatar",
	9:  "mobile",
	10: "introduce",
	11: "id_card_num",
	12: "bank_card_num",
}

func (p *Employee) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Employee[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Employee) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *Employee) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Employee) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Employee) ReadField4(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *Employee) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *Employee) ReadField6(iprot thrift.TProtocol) error {

	var _field common.Gender
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.Gender(v)
	}
	p.Gender = _field
	return nil
}
func (p *Employee) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *Employee) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *Employee) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *Employee) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Introduce = _field
	return nil
}
func (p *Employee) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCardNum = _field
	return nil
}
func (p *Employee) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BankCardNum = _field
	return nil
}

func (p *Employee) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Employee"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Employee) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Employee) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("created_at", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Employee) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("updated_at", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdatedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Employee) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Employee) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Employee) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Employee) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Employee) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Employee) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Employee) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("introduce", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Introduce); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Employee) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_num", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Employee) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bank_card_num", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Employee) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Employee(%+v)", *p)

}

func (p *Employee) DeepEqual(ano *Employee) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field7DeepEqual(ano.Age) {
		return false
	}
	if !p.Field8DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field9DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field10DeepEqual(ano.Introduce) {
		return false
	}
	if !p.Field11DeepEqual(ano.IdCardNum) {
		return false
	}
	if !p.Field12DeepEqual(ano.BankCardNum) {
		return false
	}
	return true
}

func (p *Employee) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Employee) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CreatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field3DeepEqual(src string) bool {

	if strings.Compare(p.UpdatedAt, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field4DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *Employee) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field6DeepEqual(src common.Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *Employee) Field7DeepEqual(src int64) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *Employee) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Introduce, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field11DeepEqual(src string) bool {

	if strings.Compare(p.IdCardNum, src) != 0 {
		return false
	}
	return true
}
func (p *Employee) Field12DeepEqual(src string) bool {

	if strings.Compare(p.BankCardNum, src) != 0 {
		return false
	}
	return true
}

type CreateEmployeeRequest struct {
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,1" frugal:"1,default,EnterpriseCode" json:"enterprise_code"`
	Name           string                `thrift:"name,2" frugal:"2,default,string" json:"name"`
	Gender         common.Gender         `thrift:"gender,3" frugal:"3,default,Gender" json:"gender"`
	Age            int64                 `thrift:"age,4" frugal:"4,default,i64" json:"age"`
	Avatar         string                `thrift:"avatar,5" frugal:"5,default,string" json:"avatar"`
	Mobile         string                `thrift:"mobile,6" frugal:"6,default,string" json:"mobile"`
	Introduce      string                `thrift:"introduce,7" frugal:"7,default,string" json:"introduce"`
	IdCardNum      string                `thrift:"id_card_num,8" frugal:"8,default,string" json:"id_card_num"`
	BankCardNum    string                `thrift:"bank_card_num,9" frugal:"9,default,string" json:"bank_card_num"`
}

func NewCreateEmployeeRequest() *CreateEmployeeRequest {
	return &CreateEmployeeRequest{}
}

func (p *CreateEmployeeRequest) InitDefault() {
	*p = CreateEmployeeRequest{}
}

func (p *CreateEmployeeRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *CreateEmployeeRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateEmployeeRequest) GetGender() (v common.Gender) {
	return p.Gender
}

func (p *CreateEmployeeRequest) GetAge() (v int64) {
	return p.Age
}

func (p *CreateEmployeeRequest) GetAvatar() (v string) {
	return p.Avatar
}

func (p *CreateEmployeeRequest) GetMobile() (v string) {
	return p.Mobile
}

func (p *CreateEmployeeRequest) GetIntroduce() (v string) {
	return p.Introduce
}

func (p *CreateEmployeeRequest) GetIdCardNum() (v string) {
	return p.IdCardNum
}

func (p *CreateEmployeeRequest) GetBankCardNum() (v string) {
	return p.BankCardNum
}
func (p *CreateEmployeeRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *CreateEmployeeRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateEmployeeRequest) SetGender(val common.Gender) {
	p.Gender = val
}
func (p *CreateEmployeeRequest) SetAge(val int64) {
	p.Age = val
}
func (p *CreateEmployeeRequest) SetAvatar(val string) {
	p.Avatar = val
}
func (p *CreateEmployeeRequest) SetMobile(val string) {
	p.Mobile = val
}
func (p *CreateEmployeeRequest) SetIntroduce(val string) {
	p.Introduce = val
}
func (p *CreateEmployeeRequest) SetIdCardNum(val string) {
	p.IdCardNum = val
}
func (p *CreateEmployeeRequest) SetBankCardNum(val string) {
	p.BankCardNum = val
}

var fieldIDToName_CreateEmployeeRequest = map[int16]string{
	1: "enterprise_code",
	2: "name",
	3: "gender",
	4: "age",
	5: "avatar",
	6: "mobile",
	7: "introduce",
	8: "id_card_num",
	9: "bank_card_num",
}

func (p *CreateEmployeeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEmployeeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEmployeeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field common.Gender
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.Gender(v)
	}
	p.Gender = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Introduce = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCardNum = _field
	return nil
}
func (p *CreateEmployeeRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BankCardNum = _field
	return nil
}

func (p *CreateEmployeeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployeeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("introduce", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Introduce); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_num", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateEmployeeRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bank_card_num", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateEmployeeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEmployeeRequest(%+v)", *p)

}

func (p *CreateEmployeeRequest) DeepEqual(ano *CreateEmployeeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field4DeepEqual(ano.Age) {
		return false
	}
	if !p.Field5DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field6DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field7DeepEqual(ano.Introduce) {
		return false
	}
	if !p.Field8DeepEqual(ano.IdCardNum) {
		return false
	}
	if !p.Field9DeepEqual(ano.BankCardNum) {
		return false
	}
	return true
}

func (p *CreateEmployeeRequest) Field1DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field3DeepEqual(src common.Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field4DeepEqual(src int64) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Introduce, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.IdCardNum, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEmployeeRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.BankCardNum, src) != 0 {
		return false
	}
	return true
}

type CreateEmployeeResponse struct {
	Employee *Employee `thrift:"employee,1" frugal:"1,default,Employee" json:"employee"`
}

func NewCreateEmployeeResponse() *CreateEmployeeResponse {
	return &CreateEmployeeResponse{}
}

func (p *CreateEmployeeResponse) InitDefault() {
	*p = CreateEmployeeResponse{}
}

var CreateEmployeeResponse_Employee_DEFAULT *Employee

func (p *CreateEmployeeResponse) GetEmployee() (v *Employee) {
	if !p.IsSetEmployee() {
		return CreateEmployeeResponse_Employee_DEFAULT
	}
	return p.Employee
}
func (p *CreateEmployeeResponse) SetEmployee(val *Employee) {
	p.Employee = val
}

var fieldIDToName_CreateEmployeeResponse = map[int16]string{
	1: "employee",
}

func (p *CreateEmployeeResponse) IsSetEmployee() bool {
	return p.Employee != nil
}

func (p *CreateEmployeeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEmployeeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEmployeeResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEmployee()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Employee = _field
	return nil
}

func (p *CreateEmployeeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployeeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEmployeeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Employee.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEmployeeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEmployeeResponse(%+v)", *p)

}

func (p *CreateEmployeeResponse) DeepEqual(ano *CreateEmployeeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Employee) {
		return false
	}
	return true
}

func (p *CreateEmployeeResponse) Field1DeepEqual(src *Employee) bool {

	if !p.Employee.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEmployeeRequest struct {
	Id             int64                 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,2" frugal:"2,default,EnterpriseCode" json:"enterprise_code"`
	Name           string                `thrift:"name,3" frugal:"3,default,string" json:"name"`
	Gender         common.Gender         `thrift:"gender,4" frugal:"4,default,Gender" json:"gender"`
	Age            int64                 `thrift:"age,5" frugal:"5,default,i64" json:"age"`
	Avatar         string                `thrift:"avatar,6" frugal:"6,default,string" json:"avatar"`
	Mobile         string                `thrift:"mobile,7" frugal:"7,default,string" json:"mobile"`
	Introduce      string                `thrift:"introduce,8" frugal:"8,default,string" json:"introduce"`
	IdCardNum      string                `thrift:"id_card_num,9" frugal:"9,default,string" json:"id_card_num"`
	BankCardNum    string                `thrift:"bank_card_num,10" frugal:"10,default,string" json:"bank_card_num"`
}

func NewUpdateEmployeeRequest() *UpdateEmployeeRequest {
	return &UpdateEmployeeRequest{}
}

func (p *UpdateEmployeeRequest) InitDefault() {
	*p = UpdateEmployeeRequest{}
}

func (p *UpdateEmployeeRequest) GetId() (v int64) {
	return p.Id
}

func (p *UpdateEmployeeRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *UpdateEmployeeRequest) GetName() (v string) {
	return p.Name
}

func (p *UpdateEmployeeRequest) GetGender() (v common.Gender) {
	return p.Gender
}

func (p *UpdateEmployeeRequest) GetAge() (v int64) {
	return p.Age
}

func (p *UpdateEmployeeRequest) GetAvatar() (v string) {
	return p.Avatar
}

func (p *UpdateEmployeeRequest) GetMobile() (v string) {
	return p.Mobile
}

func (p *UpdateEmployeeRequest) GetIntroduce() (v string) {
	return p.Introduce
}

func (p *UpdateEmployeeRequest) GetIdCardNum() (v string) {
	return p.IdCardNum
}

func (p *UpdateEmployeeRequest) GetBankCardNum() (v string) {
	return p.BankCardNum
}
func (p *UpdateEmployeeRequest) SetId(val int64) {
	p.Id = val
}
func (p *UpdateEmployeeRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *UpdateEmployeeRequest) SetName(val string) {
	p.Name = val
}
func (p *UpdateEmployeeRequest) SetGender(val common.Gender) {
	p.Gender = val
}
func (p *UpdateEmployeeRequest) SetAge(val int64) {
	p.Age = val
}
func (p *UpdateEmployeeRequest) SetAvatar(val string) {
	p.Avatar = val
}
func (p *UpdateEmployeeRequest) SetMobile(val string) {
	p.Mobile = val
}
func (p *UpdateEmployeeRequest) SetIntroduce(val string) {
	p.Introduce = val
}
func (p *UpdateEmployeeRequest) SetIdCardNum(val string) {
	p.IdCardNum = val
}
func (p *UpdateEmployeeRequest) SetBankCardNum(val string) {
	p.BankCardNum = val
}

var fieldIDToName_UpdateEmployeeRequest = map[int16]string{
	1:  "id",
	2:  "enterprise_code",
	3:  "name",
	4:  "gender",
	5:  "age",
	6:  "avatar",
	7:  "mobile",
	8:  "introduce",
	9:  "id_card_num",
	10: "bank_card_num",
}

func (p *UpdateEmployeeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEmployeeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEmployeeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field common.Gender
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.Gender(v)
	}
	p.Gender = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Age = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Avatar = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Mobile = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Introduce = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.IdCardNum = _field
	return nil
}
func (p *UpdateEmployeeRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BankCardNum = _field
	return nil
}

func (p *UpdateEmployeeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployeeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("avatar", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Avatar); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Mobile); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("introduce", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Introduce); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_num", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bank_card_num", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BankCardNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateEmployeeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEmployeeRequest(%+v)", *p)

}

func (p *UpdateEmployeeRequest) DeepEqual(ano *UpdateEmployeeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Gender) {
		return false
	}
	if !p.Field5DeepEqual(ano.Age) {
		return false
	}
	if !p.Field6DeepEqual(ano.Avatar) {
		return false
	}
	if !p.Field7DeepEqual(ano.Mobile) {
		return false
	}
	if !p.Field8DeepEqual(ano.Introduce) {
		return false
	}
	if !p.Field9DeepEqual(ano.IdCardNum) {
		return false
	}
	if !p.Field10DeepEqual(ano.BankCardNum) {
		return false
	}
	return true
}

func (p *UpdateEmployeeRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field2DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field4DeepEqual(src common.Gender) bool {

	if p.Gender != src {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field5DeepEqual(src int64) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Avatar, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Mobile, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Introduce, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field9DeepEqual(src string) bool {

	if strings.Compare(p.IdCardNum, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEmployeeRequest) Field10DeepEqual(src string) bool {

	if strings.Compare(p.BankCardNum, src) != 0 {
		return false
	}
	return true
}

type UpdateEmployeeResponse struct {
	Employee *Employee `thrift:"employee,1" frugal:"1,default,Employee" json:"employee"`
}

func NewUpdateEmployeeResponse() *UpdateEmployeeResponse {
	return &UpdateEmployeeResponse{}
}

func (p *UpdateEmployeeResponse) InitDefault() {
	*p = UpdateEmployeeResponse{}
}

var UpdateEmployeeResponse_Employee_DEFAULT *Employee

func (p *UpdateEmployeeResponse) GetEmployee() (v *Employee) {
	if !p.IsSetEmployee() {
		return UpdateEmployeeResponse_Employee_DEFAULT
	}
	return p.Employee
}
func (p *UpdateEmployeeResponse) SetEmployee(val *Employee) {
	p.Employee = val
}

var fieldIDToName_UpdateEmployeeResponse = map[int16]string{
	1: "employee",
}

func (p *UpdateEmployeeResponse) IsSetEmployee() bool {
	return p.Employee != nil
}

func (p *UpdateEmployeeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEmployeeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEmployeeResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEmployee()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Employee = _field
	return nil
}

func (p *UpdateEmployeeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployeeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEmployeeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Employee.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateEmployeeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEmployeeResponse(%+v)", *p)

}

func (p *UpdateEmployeeResponse) DeepEqual(ano *UpdateEmployeeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Employee) {
		return false
	}
	return true
}

func (p *UpdateEmployeeResponse) Field1DeepEqual(src *Employee) bool {

	if !p.Employee.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEmployeeRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewDeleteEmployeeRequest() *DeleteEmployeeRequest {
	return &DeleteEmployeeRequest{}
}

func (p *DeleteEmployeeRequest) InitDefault() {
	*p = DeleteEmployeeRequest{}
}

func (p *DeleteEmployeeRequest) GetId() (v int64) {
	return p.Id
}
func (p *DeleteEmployeeRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_DeleteEmployeeRequest = map[int16]string{
	1: "id",
}

func (p *DeleteEmployeeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEmployeeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEmployeeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *DeleteEmployeeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployeeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEmployeeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteEmployeeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEmployeeRequest(%+v)", *p)

}

func (p *DeleteEmployeeRequest) DeepEqual(ano *DeleteEmployeeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DeleteEmployeeRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type DeleteEmployeeResponse struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewDeleteEmployeeResponse() *DeleteEmployeeResponse {
	return &DeleteEmployeeResponse{}
}

func (p *DeleteEmployeeResponse) InitDefault() {
	*p = DeleteEmployeeResponse{}
}

func (p *DeleteEmployeeResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeleteEmployeeResponse) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_DeleteEmployeeResponse = map[int16]string{
	1: "success",
}

func (p *DeleteEmployeeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEmployeeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEmployeeResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}

func (p *DeleteEmployeeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployeeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEmployeeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteEmployeeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEmployeeResponse(%+v)", *p)

}

func (p *DeleteEmployeeResponse) DeepEqual(ano *DeleteEmployeeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DeleteEmployeeResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type GetEmployeeRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewGetEmployeeRequest() *GetEmployeeRequest {
	return &GetEmployeeRequest{}
}

func (p *GetEmployeeRequest) InitDefault() {
	*p = GetEmployeeRequest{}
}

func (p *GetEmployeeRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetEmployeeRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetEmployeeRequest = map[int16]string{
	1: "id",
}

func (p *GetEmployeeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEmployeeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEmployeeRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetEmployeeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployeeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEmployeeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEmployeeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEmployeeRequest(%+v)", *p)

}

func (p *GetEmployeeRequest) DeepEqual(ano *GetEmployeeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetEmployeeRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetEmployeeResponse struct {
	Employee *Employee `thrift:"employee,1" frugal:"1,default,Employee" json:"employee"`
}

func NewGetEmployeeResponse() *GetEmployeeResponse {
	return &GetEmployeeResponse{}
}

func (p *GetEmployeeResponse) InitDefault() {
	*p = GetEmployeeResponse{}
}

var GetEmployeeResponse_Employee_DEFAULT *Employee

func (p *GetEmployeeResponse) GetEmployee() (v *Employee) {
	if !p.IsSetEmployee() {
		return GetEmployeeResponse_Employee_DEFAULT
	}
	return p.Employee
}
func (p *GetEmployeeResponse) SetEmployee(val *Employee) {
	p.Employee = val
}

var fieldIDToName_GetEmployeeResponse = map[int16]string{
	1: "employee",
}

func (p *GetEmployeeResponse) IsSetEmployee() bool {
	return p.Employee != nil
}

func (p *GetEmployeeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEmployeeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEmployeeResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEmployee()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Employee = _field
	return nil
}

func (p *GetEmployeeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployeeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEmployeeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employee", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Employee.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEmployeeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEmployeeResponse(%+v)", *p)

}

func (p *GetEmployeeResponse) DeepEqual(ano *GetEmployeeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Employee) {
		return false
	}
	return true
}

func (p *GetEmployeeResponse) Field1DeepEqual(src *Employee) bool {

	if !p.Employee.DeepEqual(src) {
		return false
	}
	return true
}

type ListEmployeesRequest struct {
	EnterpriseCode common.EnterpriseCode `thrift:"enterprise_code,1" frugal:"1,default,EnterpriseCode" json:"enterprise_code"`
	Page           int64                 `thrift:"page,2" frugal:"2,default,i64" json:"page"`
	PageSize       int64                 `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewListEmployeesRequest() *ListEmployeesRequest {
	return &ListEmployeesRequest{}
}

func (p *ListEmployeesRequest) InitDefault() {
	*p = ListEmployeesRequest{}
}

func (p *ListEmployeesRequest) GetEnterpriseCode() (v common.EnterpriseCode) {
	return p.EnterpriseCode
}

func (p *ListEmployeesRequest) GetPage() (v int64) {
	return p.Page
}

func (p *ListEmployeesRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *ListEmployeesRequest) SetEnterpriseCode(val common.EnterpriseCode) {
	p.EnterpriseCode = val
}
func (p *ListEmployeesRequest) SetPage(val int64) {
	p.Page = val
}
func (p *ListEmployeesRequest) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_ListEmployeesRequest = map[int16]string{
	1: "enterprise_code",
	2: "page",
	3: "page_size",
}

func (p *ListEmployeesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEmployeesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEmployeesRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field common.EnterpriseCode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = common.EnterpriseCode(v)
	}
	p.EnterpriseCode = _field
	return nil
}
func (p *ListEmployeesRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Page = _field
	return nil
}
func (p *ListEmployeesRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PageSize = _field
	return nil
}

func (p *ListEmployeesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployeesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEmployeesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enterprise_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EnterpriseCode)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListEmployeesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Page); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListEmployeesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListEmployeesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEmployeesRequest(%+v)", *p)

}

func (p *ListEmployeesRequest) DeepEqual(ano *ListEmployeesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EnterpriseCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Page) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ListEmployeesRequest) Field1DeepEqual(src common.EnterpriseCode) bool {

	if p.EnterpriseCode != src {
		return false
	}
	return true
}
func (p *ListEmployeesRequest) Field2DeepEqual(src int64) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *ListEmployeesRequest) Field3DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type ListEmployeesResponse struct {
	Employees []*Employee `thrift:"employees,1" frugal:"1,default,list<Employee>" json:"employees"`
	Total     int64       `thrift:"total,2" frugal:"2,default,i64" json:"total"`
}

func NewListEmployeesResponse() *ListEmployeesResponse {
	return &ListEmployeesResponse{}
}

func (p *ListEmployeesResponse) InitDefault() {
	*p = ListEmployeesResponse{}
}

func (p *ListEmployeesResponse) GetEmployees() (v []*Employee) {
	return p.Employees
}

func (p *ListEmployeesResponse) GetTotal() (v int64) {
	return p.Total
}
func (p *ListEmployeesResponse) SetEmployees(val []*Employee) {
	p.Employees = val
}
func (p *ListEmployeesResponse) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_ListEmployeesResponse = map[int16]string{
	1: "employees",
	2: "total",
}

func (p *ListEmployeesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEmployeesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEmployeesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Employee, 0, size)
	values := make([]Employee, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Employees = _field
	return nil
}
func (p *ListEmployeesResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Total = _field
	return nil
}

func (p *ListEmployeesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployeesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEmployeesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("employees", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Employees)); err != nil {
		return err
	}
	for _, v := range p.Employees {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListEmployeesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListEmployeesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEmployeesResponse(%+v)", *p)

}

func (p *ListEmployeesResponse) DeepEqual(ano *ListEmployeesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Employees) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEmployeesResponse) Field1DeepEqual(src []*Employee) bool {

	if len(p.Employees) != len(src) {
		return false
	}
	for i, v := range p.Employees {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEmployeesResponse) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type EmployeeService interface {
	CreateEmployee(ctx context.Context, req *CreateEmployeeRequest) (r *CreateEmployeeResponse, err error)

	UpdateEmployee(ctx context.Context, req *UpdateEmployeeRequest) (r *UpdateEmployeeResponse, err error)

	DeleteEmployee(ctx context.Context, req *DeleteEmployeeRequest) (r *DeleteEmployeeResponse, err error)

	GetEmployee(ctx context.Context, req *GetEmployeeRequest) (r *GetEmployeeResponse, err error)

	ListEmployees(ctx context.Context, req *ListEmployeesRequest) (r *ListEmployeesResponse, err error)
}

type EmployeeServiceClient struct {
	c thrift.TClient
}

func NewEmployeeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEmployeeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEmployeeServiceClient(c thrift.TClient) *EmployeeServiceClient {
	return &EmployeeServiceClient{
		c: c,
	}
}

func (p *EmployeeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EmployeeServiceClient) CreateEmployee(ctx context.Context, req *CreateEmployeeRequest) (r *CreateEmployeeResponse, err error) {
	var _args EmployeeServiceCreateEmployeeArgs
	_args.Req = req
	var _result EmployeeServiceCreateEmployeeResult
	if err = p.Client_().Call(ctx, "CreateEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) UpdateEmployee(ctx context.Context, req *UpdateEmployeeRequest) (r *UpdateEmployeeResponse, err error) {
	var _args EmployeeServiceUpdateEmployeeArgs
	_args.Req = req
	var _result EmployeeServiceUpdateEmployeeResult
	if err = p.Client_().Call(ctx, "UpdateEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) DeleteEmployee(ctx context.Context, req *DeleteEmployeeRequest) (r *DeleteEmployeeResponse, err error) {
	var _args EmployeeServiceDeleteEmployeeArgs
	_args.Req = req
	var _result EmployeeServiceDeleteEmployeeResult
	if err = p.Client_().Call(ctx, "DeleteEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) GetEmployee(ctx context.Context, req *GetEmployeeRequest) (r *GetEmployeeResponse, err error) {
	var _args EmployeeServiceGetEmployeeArgs
	_args.Req = req
	var _result EmployeeServiceGetEmployeeResult
	if err = p.Client_().Call(ctx, "GetEmployee", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EmployeeServiceClient) ListEmployees(ctx context.Context, req *ListEmployeesRequest) (r *ListEmployeesResponse, err error) {
	var _args EmployeeServiceListEmployeesArgs
	_args.Req = req
	var _result EmployeeServiceListEmployeesResult
	if err = p.Client_().Call(ctx, "ListEmployees", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EmployeeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EmployeeService
}

func (p *EmployeeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EmployeeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EmployeeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEmployeeServiceProcessor(handler EmployeeService) *EmployeeServiceProcessor {
	self := &EmployeeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEmployee", &employeeServiceProcessorCreateEmployee{handler: handler})
	self.AddToProcessorMap("UpdateEmployee", &employeeServiceProcessorUpdateEmployee{handler: handler})
	self.AddToProcessorMap("DeleteEmployee", &employeeServiceProcessorDeleteEmployee{handler: handler})
	self.AddToProcessorMap("GetEmployee", &employeeServiceProcessorGetEmployee{handler: handler})
	self.AddToProcessorMap("ListEmployees", &employeeServiceProcessorListEmployees{handler: handler})
	return self
}
func (p *EmployeeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type employeeServiceProcessorCreateEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorCreateEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceCreateEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceCreateEmployeeResult{}
	var retval *CreateEmployeeResponse
	if retval, err2 = p.handler.CreateEmployee(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEmployee: "+err2.Error())
		oprot.WriteMessageBegin("CreateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorUpdateEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorUpdateEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceUpdateEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceUpdateEmployeeResult{}
	var retval *UpdateEmployeeResponse
	if retval, err2 = p.handler.UpdateEmployee(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEmployee: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorDeleteEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorDeleteEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceDeleteEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceDeleteEmployeeResult{}
	var retval *DeleteEmployeeResponse
	if retval, err2 = p.handler.DeleteEmployee(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteEmployee: "+err2.Error())
		oprot.WriteMessageBegin("DeleteEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorGetEmployee struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorGetEmployee) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceGetEmployeeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceGetEmployeeResult{}
	var retval *GetEmployeeResponse
	if retval, err2 = p.handler.GetEmployee(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEmployee: "+err2.Error())
		oprot.WriteMessageBegin("GetEmployee", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEmployee", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type employeeServiceProcessorListEmployees struct {
	handler EmployeeService
}

func (p *employeeServiceProcessorListEmployees) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmployeeServiceListEmployeesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEmployees", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EmployeeServiceListEmployeesResult{}
	var retval *ListEmployeesResponse
	if retval, err2 = p.handler.ListEmployees(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEmployees: "+err2.Error())
		oprot.WriteMessageBegin("ListEmployees", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEmployees", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EmployeeServiceCreateEmployeeArgs struct {
	Req *CreateEmployeeRequest `thrift:"req,1" frugal:"1,default,CreateEmployeeRequest" json:"req"`
}

func NewEmployeeServiceCreateEmployeeArgs() *EmployeeServiceCreateEmployeeArgs {
	return &EmployeeServiceCreateEmployeeArgs{}
}

func (p *EmployeeServiceCreateEmployeeArgs) InitDefault() {
	*p = EmployeeServiceCreateEmployeeArgs{}
}

var EmployeeServiceCreateEmployeeArgs_Req_DEFAULT *CreateEmployeeRequest

func (p *EmployeeServiceCreateEmployeeArgs) GetReq() (v *CreateEmployeeRequest) {
	if !p.IsSetReq() {
		return EmployeeServiceCreateEmployeeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EmployeeServiceCreateEmployeeArgs) SetReq(val *CreateEmployeeRequest) {
	p.Req = val
}

var fieldIDToName_EmployeeServiceCreateEmployeeArgs = map[int16]string{
	1: "req",
}

func (p *EmployeeServiceCreateEmployeeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmployeeServiceCreateEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceCreateEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EmployeeServiceCreateEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceCreateEmployeeArgs(%+v)", *p)

}

func (p *EmployeeServiceCreateEmployeeArgs) DeepEqual(ano *EmployeeServiceCreateEmployeeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EmployeeServiceCreateEmployeeArgs) Field1DeepEqual(src *CreateEmployeeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceCreateEmployeeResult struct {
	Success *CreateEmployeeResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEmployeeResponse" json:"success,omitempty"`
}

func NewEmployeeServiceCreateEmployeeResult() *EmployeeServiceCreateEmployeeResult {
	return &EmployeeServiceCreateEmployeeResult{}
}

func (p *EmployeeServiceCreateEmployeeResult) InitDefault() {
	*p = EmployeeServiceCreateEmployeeResult{}
}

var EmployeeServiceCreateEmployeeResult_Success_DEFAULT *CreateEmployeeResponse

func (p *EmployeeServiceCreateEmployeeResult) GetSuccess() (v *CreateEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceCreateEmployeeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EmployeeServiceCreateEmployeeResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEmployeeResponse)
}

var fieldIDToName_EmployeeServiceCreateEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceCreateEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceCreateEmployeeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceCreateEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceCreateEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceCreateEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceCreateEmployeeResult(%+v)", *p)

}

func (p *EmployeeServiceCreateEmployeeResult) DeepEqual(ano *EmployeeServiceCreateEmployeeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EmployeeServiceCreateEmployeeResult) Field0DeepEqual(src *CreateEmployeeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceUpdateEmployeeArgs struct {
	Req *UpdateEmployeeRequest `thrift:"req,1" frugal:"1,default,UpdateEmployeeRequest" json:"req"`
}

func NewEmployeeServiceUpdateEmployeeArgs() *EmployeeServiceUpdateEmployeeArgs {
	return &EmployeeServiceUpdateEmployeeArgs{}
}

func (p *EmployeeServiceUpdateEmployeeArgs) InitDefault() {
	*p = EmployeeServiceUpdateEmployeeArgs{}
}

var EmployeeServiceUpdateEmployeeArgs_Req_DEFAULT *UpdateEmployeeRequest

func (p *EmployeeServiceUpdateEmployeeArgs) GetReq() (v *UpdateEmployeeRequest) {
	if !p.IsSetReq() {
		return EmployeeServiceUpdateEmployeeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EmployeeServiceUpdateEmployeeArgs) SetReq(val *UpdateEmployeeRequest) {
	p.Req = val
}

var fieldIDToName_EmployeeServiceUpdateEmployeeArgs = map[int16]string{
	1: "req",
}

func (p *EmployeeServiceUpdateEmployeeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmployeeServiceUpdateEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceUpdateEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EmployeeServiceUpdateEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceUpdateEmployeeArgs(%+v)", *p)

}

func (p *EmployeeServiceUpdateEmployeeArgs) DeepEqual(ano *EmployeeServiceUpdateEmployeeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EmployeeServiceUpdateEmployeeArgs) Field1DeepEqual(src *UpdateEmployeeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceUpdateEmployeeResult struct {
	Success *UpdateEmployeeResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEmployeeResponse" json:"success,omitempty"`
}

func NewEmployeeServiceUpdateEmployeeResult() *EmployeeServiceUpdateEmployeeResult {
	return &EmployeeServiceUpdateEmployeeResult{}
}

func (p *EmployeeServiceUpdateEmployeeResult) InitDefault() {
	*p = EmployeeServiceUpdateEmployeeResult{}
}

var EmployeeServiceUpdateEmployeeResult_Success_DEFAULT *UpdateEmployeeResponse

func (p *EmployeeServiceUpdateEmployeeResult) GetSuccess() (v *UpdateEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceUpdateEmployeeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EmployeeServiceUpdateEmployeeResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEmployeeResponse)
}

var fieldIDToName_EmployeeServiceUpdateEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceUpdateEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceUpdateEmployeeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceUpdateEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceUpdateEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceUpdateEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceUpdateEmployeeResult(%+v)", *p)

}

func (p *EmployeeServiceUpdateEmployeeResult) DeepEqual(ano *EmployeeServiceUpdateEmployeeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EmployeeServiceUpdateEmployeeResult) Field0DeepEqual(src *UpdateEmployeeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceDeleteEmployeeArgs struct {
	Req *DeleteEmployeeRequest `thrift:"req,1" frugal:"1,default,DeleteEmployeeRequest" json:"req"`
}

func NewEmployeeServiceDeleteEmployeeArgs() *EmployeeServiceDeleteEmployeeArgs {
	return &EmployeeServiceDeleteEmployeeArgs{}
}

func (p *EmployeeServiceDeleteEmployeeArgs) InitDefault() {
	*p = EmployeeServiceDeleteEmployeeArgs{}
}

var EmployeeServiceDeleteEmployeeArgs_Req_DEFAULT *DeleteEmployeeRequest

func (p *EmployeeServiceDeleteEmployeeArgs) GetReq() (v *DeleteEmployeeRequest) {
	if !p.IsSetReq() {
		return EmployeeServiceDeleteEmployeeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EmployeeServiceDeleteEmployeeArgs) SetReq(val *DeleteEmployeeRequest) {
	p.Req = val
}

var fieldIDToName_EmployeeServiceDeleteEmployeeArgs = map[int16]string{
	1: "req",
}

func (p *EmployeeServiceDeleteEmployeeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmployeeServiceDeleteEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceDeleteEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EmployeeServiceDeleteEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceDeleteEmployeeArgs(%+v)", *p)

}

func (p *EmployeeServiceDeleteEmployeeArgs) DeepEqual(ano *EmployeeServiceDeleteEmployeeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EmployeeServiceDeleteEmployeeArgs) Field1DeepEqual(src *DeleteEmployeeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceDeleteEmployeeResult struct {
	Success *DeleteEmployeeResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteEmployeeResponse" json:"success,omitempty"`
}

func NewEmployeeServiceDeleteEmployeeResult() *EmployeeServiceDeleteEmployeeResult {
	return &EmployeeServiceDeleteEmployeeResult{}
}

func (p *EmployeeServiceDeleteEmployeeResult) InitDefault() {
	*p = EmployeeServiceDeleteEmployeeResult{}
}

var EmployeeServiceDeleteEmployeeResult_Success_DEFAULT *DeleteEmployeeResponse

func (p *EmployeeServiceDeleteEmployeeResult) GetSuccess() (v *DeleteEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceDeleteEmployeeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EmployeeServiceDeleteEmployeeResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteEmployeeResponse)
}

var fieldIDToName_EmployeeServiceDeleteEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceDeleteEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceDeleteEmployeeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceDeleteEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceDeleteEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceDeleteEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceDeleteEmployeeResult(%+v)", *p)

}

func (p *EmployeeServiceDeleteEmployeeResult) DeepEqual(ano *EmployeeServiceDeleteEmployeeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EmployeeServiceDeleteEmployeeResult) Field0DeepEqual(src *DeleteEmployeeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceGetEmployeeArgs struct {
	Req *GetEmployeeRequest `thrift:"req,1" frugal:"1,default,GetEmployeeRequest" json:"req"`
}

func NewEmployeeServiceGetEmployeeArgs() *EmployeeServiceGetEmployeeArgs {
	return &EmployeeServiceGetEmployeeArgs{}
}

func (p *EmployeeServiceGetEmployeeArgs) InitDefault() {
	*p = EmployeeServiceGetEmployeeArgs{}
}

var EmployeeServiceGetEmployeeArgs_Req_DEFAULT *GetEmployeeRequest

func (p *EmployeeServiceGetEmployeeArgs) GetReq() (v *GetEmployeeRequest) {
	if !p.IsSetReq() {
		return EmployeeServiceGetEmployeeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EmployeeServiceGetEmployeeArgs) SetReq(val *GetEmployeeRequest) {
	p.Req = val
}

var fieldIDToName_EmployeeServiceGetEmployeeArgs = map[int16]string{
	1: "req",
}

func (p *EmployeeServiceGetEmployeeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmployeeServiceGetEmployeeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceGetEmployeeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEmployeeRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EmployeeServiceGetEmployeeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployee_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceGetEmployeeArgs(%+v)", *p)

}

func (p *EmployeeServiceGetEmployeeArgs) DeepEqual(ano *EmployeeServiceGetEmployeeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EmployeeServiceGetEmployeeArgs) Field1DeepEqual(src *GetEmployeeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceGetEmployeeResult struct {
	Success *GetEmployeeResponse `thrift:"success,0,optional" frugal:"0,optional,GetEmployeeResponse" json:"success,omitempty"`
}

func NewEmployeeServiceGetEmployeeResult() *EmployeeServiceGetEmployeeResult {
	return &EmployeeServiceGetEmployeeResult{}
}

func (p *EmployeeServiceGetEmployeeResult) InitDefault() {
	*p = EmployeeServiceGetEmployeeResult{}
}

var EmployeeServiceGetEmployeeResult_Success_DEFAULT *GetEmployeeResponse

func (p *EmployeeServiceGetEmployeeResult) GetSuccess() (v *GetEmployeeResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceGetEmployeeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EmployeeServiceGetEmployeeResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEmployeeResponse)
}

var fieldIDToName_EmployeeServiceGetEmployeeResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceGetEmployeeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceGetEmployeeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceGetEmployeeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEmployeeResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceGetEmployeeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEmployee_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceGetEmployeeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceGetEmployeeResult(%+v)", *p)

}

func (p *EmployeeServiceGetEmployeeResult) DeepEqual(ano *EmployeeServiceGetEmployeeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EmployeeServiceGetEmployeeResult) Field0DeepEqual(src *GetEmployeeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceListEmployeesArgs struct {
	Req *ListEmployeesRequest `thrift:"req,1" frugal:"1,default,ListEmployeesRequest" json:"req"`
}

func NewEmployeeServiceListEmployeesArgs() *EmployeeServiceListEmployeesArgs {
	return &EmployeeServiceListEmployeesArgs{}
}

func (p *EmployeeServiceListEmployeesArgs) InitDefault() {
	*p = EmployeeServiceListEmployeesArgs{}
}

var EmployeeServiceListEmployeesArgs_Req_DEFAULT *ListEmployeesRequest

func (p *EmployeeServiceListEmployeesArgs) GetReq() (v *ListEmployeesRequest) {
	if !p.IsSetReq() {
		return EmployeeServiceListEmployeesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EmployeeServiceListEmployeesArgs) SetReq(val *ListEmployeesRequest) {
	p.Req = val
}

var fieldIDToName_EmployeeServiceListEmployeesArgs = map[int16]string{
	1: "req",
}

func (p *EmployeeServiceListEmployeesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EmployeeServiceListEmployeesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceListEmployeesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEmployeesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EmployeeServiceListEmployeesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployees_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceListEmployeesArgs(%+v)", *p)

}

func (p *EmployeeServiceListEmployeesArgs) DeepEqual(ano *EmployeeServiceListEmployeesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EmployeeServiceListEmployeesArgs) Field1DeepEqual(src *ListEmployeesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EmployeeServiceListEmployeesResult struct {
	Success *ListEmployeesResponse `thrift:"success,0,optional" frugal:"0,optional,ListEmployeesResponse" json:"success,omitempty"`
}

func NewEmployeeServiceListEmployeesResult() *EmployeeServiceListEmployeesResult {
	return &EmployeeServiceListEmployeesResult{}
}

func (p *EmployeeServiceListEmployeesResult) InitDefault() {
	*p = EmployeeServiceListEmployeesResult{}
}

var EmployeeServiceListEmployeesResult_Success_DEFAULT *ListEmployeesResponse

func (p *EmployeeServiceListEmployeesResult) GetSuccess() (v *ListEmployeesResponse) {
	if !p.IsSetSuccess() {
		return EmployeeServiceListEmployeesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EmployeeServiceListEmployeesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEmployeesResponse)
}

var fieldIDToName_EmployeeServiceListEmployeesResult = map[int16]string{
	0: "success",
}

func (p *EmployeeServiceListEmployeesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmployeeServiceListEmployeesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EmployeeServiceListEmployeesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEmployeesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EmployeeServiceListEmployeesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEmployees_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EmployeeServiceListEmployeesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmployeeServiceListEmployeesResult(%+v)", *p)

}

func (p *EmployeeServiceListEmployeesResult) DeepEqual(ano *EmployeeServiceListEmployeesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EmployeeServiceListEmployeesResult) Field0DeepEqual(src *ListEmployeesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
