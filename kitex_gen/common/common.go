// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package common

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Gender int64

const (
	Gender_Unknown Gender = 0
	Gender_Male    Gender = 1
	Gender_Female  Gender = 2
)

func (p Gender) String() string {
	switch p {
	case Gender_Unknown:
		return "Unknown"
	case Gender_Male:
		return "Male"
	case Gender_Female:
		return "Female"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "Unknown":
		return Gender_Unknown, nil
	case "Male":
		return Gender_Male, nil
	case "Female":
		return Gender_Female, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }
func (p *Gender) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Gender(result.Int64)
	return
}

func (p *Gender) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type EnterpriseCode int64

const (
	EnterpriseCode_Unknown   EnterpriseCode = 0
	EnterpriseCode_Google    EnterpriseCode = 1
	EnterpriseCode_Microsoft EnterpriseCode = 2
	EnterpriseCode_Apple     EnterpriseCode = 3
	EnterpriseCode_Amazon    EnterpriseCode = 4
	EnterpriseCode_Facebook  EnterpriseCode = 5
)

func (p EnterpriseCode) String() string {
	switch p {
	case EnterpriseCode_Unknown:
		return "Unknown"
	case EnterpriseCode_Google:
		return "Google"
	case EnterpriseCode_Microsoft:
		return "Microsoft"
	case EnterpriseCode_Apple:
		return "Apple"
	case EnterpriseCode_Amazon:
		return "Amazon"
	case EnterpriseCode_Facebook:
		return "Facebook"
	}
	return "<UNSET>"
}

func EnterpriseCodeFromString(s string) (EnterpriseCode, error) {
	switch s {
	case "Unknown":
		return EnterpriseCode_Unknown, nil
	case "Google":
		return EnterpriseCode_Google, nil
	case "Microsoft":
		return EnterpriseCode_Microsoft, nil
	case "Apple":
		return EnterpriseCode_Apple, nil
	case "Amazon":
		return EnterpriseCode_Amazon, nil
	case "Facebook":
		return EnterpriseCode_Facebook, nil
	}
	return EnterpriseCode(0), fmt.Errorf("not a valid EnterpriseCode string")
}

func EnterpriseCodePtr(v EnterpriseCode) *EnterpriseCode { return &v }
func (p *EnterpriseCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EnterpriseCode(result.Int64)
	return
}

func (p *EnterpriseCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
